{"version":3,"sources":["StationContex.js","hooks/useFetchAir.js","components/SearchStation.js","components/GetStation.js","components/Geolocation.js","components/Stations.js","components/AirLook.js","components/StationResults.js","components/AirInfo.js","App.js","serviceWorker.js","index.js"],"names":["StationContex","createContext","useFetchAir","url","useState","allStation","setAllStation","station","setStation","measuringStations","setmeasuringStations","measuringData","setmeasuringData","getAllStation","a","async","fetch","response","json","getStation","getMeasuringStations","getMeasuringData","prevState","SearchStation","search","value","setValue","useEffect","className","type","placeholder","onChange","e","target","GetStation","item","name","city","addressStreet","id","to","Geolocation","latUp","latDown","lonUp","lonDown","useContext","showPosition","position","lat","coords","latitude","lon","longitude","geoStation","filter","gegrLat","gegrLon","navigator","geolocation","getCurrentPosition","length","map","key","Stations","setCity","searchCity","toLowerCase","AirLook","values","airValue","StationResults","result","AirInfo","props","match","urlStations","params","onClick","history","goBack","App","Provider","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d7463c0.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const StationContex = createContext(null);\r\n","import { useState } from \"react\";\r\nexport const useFetchAir = url => {\r\n  const [allStation, setAllStation] = useState(null);\r\n  const [station, setStation] = useState(null);\r\n  const [measuringStations, setmeasuringStations] = useState(null);\r\n  const [measuringData, setmeasuringData] = useState([]);\r\n\r\n  const getAllStation = async url => {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    setAllStation(json);\r\n  };\r\n  const getStation = async url => {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    setStation(json);\r\n  };\r\n  const getMeasuringStations = async url => {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    setmeasuringStations(json);\r\n  };\r\n  const getMeasuringData = async url => {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    setmeasuringData(prevState => [...prevState, json]);\r\n  };\r\n\r\n  return {\r\n    getAllStation,\r\n    allStation,\r\n    getStation,\r\n    station,\r\n    getMeasuringStations,\r\n    measuringStations,\r\n    getMeasuringData,\r\n    measuringData\r\n  };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./SearchStation.scss\";\r\n\r\nconst SearchStation = ({ search }) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const inputHandler = e => {\r\n    setValue(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    if (value !== \"\") {\r\n      search(value);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [value]);\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col search\">\r\n          <input\r\n            className=\"search__input\"\r\n            type=\"tekst\"\r\n            placeholder=\"Enter city\"\r\n            value={value}\r\n            onChange={inputHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchStation;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./GetStation.scss\";\r\n\r\nconst GetStation = ({ item }) => {\r\n  const {\r\n    city: { name },\r\n    addressStreet,\r\n    id\r\n  } = item;\r\n  return (\r\n    <div className=\"col-sm-6 col-md-6 col-lg-4 col-xl-3\">\r\n      <div className=\"station\">\r\n        <div className=\"station__content\">\r\n          <h2 className=\"station__title\">{name}</h2>\r\n          <p className=\"station__address\">{addressStreet}</p>\r\n          <div className=\"station__button\">\r\n            <button>\r\n              <Link to={`/info/${id}`}>Show air quality</Link>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetStation;\r\n","import React, { useContext } from \"react\";\r\nimport { StationContex } from \"../StationContex\";\r\nimport GetStation from \"./GetStation\";\r\nimport \"./Geolocation.scss\";\r\n\r\nconst Geolocation = () => {\r\n  const allStation = useContext(StationContex);\r\n\r\n  let latUp;\r\n  let latDown;\r\n  let lonUp;\r\n  let lonDown;\r\n\r\n  const showPosition = position => {\r\n    let lat = position.coords.latitude;\r\n    let lon = position.coords.longitude;\r\n    latUp = lat + 0.2;\r\n    latDown = lat - 0.2;\r\n    lonUp = lon + 0.25;\r\n    lonDown = lon - 0.25;\r\n  };\r\n\r\n  const geoStation =\r\n    allStation !== null &&\r\n    allStation.filter(station => {\r\n      if (\r\n        station.gegrLat > latDown &&\r\n        station.gegrLat < latUp &&\r\n        station.gegrLon > lonDown &&\r\n        station.gegrLon < lonUp\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n  const getLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(showPosition);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n  getLocation();\r\n\r\n  return (\r\n    <div className=\"geolocation\">\r\n      <h2 className=\"geolocation__title\">Nearest measuring stations</h2>\r\n      <div className=\"container\">\r\n        <div className=\"row no-gutters\">\r\n          {geoStation.length > 0 &&\r\n            geoStation.map(item => <GetStation key={item.id} item={item} />)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Geolocation;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport SearchStation from \"./SearchStation\";\r\nimport GetStation from \"./GetStation\";\r\nimport Geolocation from \"./Geolocation\";\r\n\r\nimport { StationContex } from \"../StationContex\";\r\n\r\nconst Stations = () => {\r\n  const allStation = useContext(StationContex);\r\n  const [city, setCity] = useState([]);\r\n\r\n  const searchHandler = value => {\r\n    const searchCity = allStation.filter(item => {\r\n      if (item.city !== null) {\r\n        return item.city.name.toLowerCase() === value.toLowerCase();\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    setCity(searchCity);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container \">\r\n      <div className=\"row no-gutters\">\r\n        <div className=\"col\">\r\n          <SearchStation search={searchHandler} />\r\n          {city.length > 0 ? (\r\n            <div className=\"container\">\r\n              <div className=\"row no-gutters\">\r\n                {city.map(item => (\r\n                  <GetStation key={item.id} item={item} />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Geolocation />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stations;\r\n","import React from \"react\";\r\nimport {\r\n  MdSentimentDissatisfied,\r\n  MdSentimentNeutral,\r\n  MdSentimentSatisfied\r\n} from \"react-icons/md\";\r\nimport \"./AirLook.scss\";\r\n\r\nconst airValue = value => {\r\n  if (value.key === \"PM10\") {\r\n    if (value.values[1].value < 50) {\r\n      return <MdSentimentSatisfied className=\"happy\" />;\r\n    } else if (value.values[1].value < 200) {\r\n      return <MdSentimentNeutral className=\"neutral\" />;\r\n    } else if (value.values[1].value > 200) {\r\n      return <MdSentimentNeutral className=\"neutral-sad\" />;\r\n    } else if (value.values[1].value >= 300) {\r\n      return <MdSentimentDissatisfied className=\"sad\" />;\r\n    }\r\n  } else if (value.key === \"PM2.5\") {\r\n    if (value.values[1].value < 25) {\r\n      return <MdSentimentSatisfied className=\"happy\" />;\r\n    } else if (value.values[1].value > 25) {\r\n      return <MdSentimentNeutral className=\"neutral\" />;\r\n    } else if (value.values[1].value >= 30) {\r\n      return <MdSentimentNeutral className=\"neutral-sad\" />;\r\n    } else if (value.values[1].value === null) {\r\n      return <span>Brak danych</span>;\r\n    }\r\n  } else if (value.key === \"O3\") {\r\n    if (value.values[1].value < 120) {\r\n      return <MdSentimentSatisfied className=\"happy\" />;\r\n    } else if (value.values[1].value > 120) {\r\n      return <MdSentimentNeutral className=\"neutral\" />;\r\n    } else if (value.values[1].value > 180) {\r\n      return <MdSentimentNeutral className=\"neutral-sad\" />;\r\n    } else if (value.values[1].value >= 240) {\r\n      return <MdSentimentDissatisfied className=\"sad\" />;\r\n    }\r\n  } else if (value.key === \"SO2\") {\r\n    if (value.values[1].value < 125) {\r\n      return <MdSentimentSatisfied className=\"happy\" />;\r\n    } else if (value.values[1].value > 125) {\r\n      return <MdSentimentNeutral className=\"neutral\" />;\r\n    } else if (value.values[1].value > 350) {\r\n      return <MdSentimentNeutral className=\"neutral-sad\" />;\r\n    } else if (value.values[1].value >= 500) {\r\n      return <MdSentimentDissatisfied className=\"sad\" />;\r\n    }\r\n  } else if (value.key === \"NO2\") {\r\n    if (value.values[1].value <= 40) {\r\n      return <MdSentimentSatisfied className=\"happy\" />;\r\n    } else if (value.values[1].value > 40) {\r\n      return <MdSentimentNeutral className=\"neutral\" />;\r\n    } else if (value.values[1].value > 200) {\r\n      return <MdSentimentNeutral className=\"neutral-sad\" />;\r\n    } else if (value.values[1].value >= 400) {\r\n      return <MdSentimentDissatisfied className=\"sad\" />;\r\n    }\r\n  } else if (value.key === \"CO\") {\r\n    if (value.values[1].value <= 11.1) {\r\n      return <MdSentimentSatisfied className=\"happy\" />;\r\n    } else if (value.values[1].value > 11.1) {\r\n      return <MdSentimentNeutral className=\"neutral\" />;\r\n    } else if (value.values[1].value >= 43.2) {\r\n      return <MdSentimentDissatisfied className=\"sad\" />;\r\n    }\r\n  } else if (value.key === \"C6H6\") {\r\n    if (value.values[1].value <= 5) {\r\n      return <MdSentimentSatisfied className=\"happy\" />;\r\n    } else if (value.values[1].value > 5) {\r\n      return <MdSentimentDissatisfied className=\"sad\" />;\r\n    }\r\n  }\r\n};\r\n\r\nconst AirLook = ({ item }) => {\r\n  return <div className=\"icon\">{airValue(item)}</div>;\r\n};\r\n\r\nexport default AirLook;\r\n","import React from \"react\";\r\nimport AirLook from \"./AirLook\";\r\nimport \"./StationResult.scss\";\r\n\r\nconst StationResults = ({ result }) => {\r\n  return (\r\n    <div className=\"station-result\" key={result.key}>\r\n      <span className=\"station-result__title\">\r\n        {result.key === \"PM2.5\" ? \"Suspended dust\" : null}\r\n        {result.key === \"PM10\" ? \"Suspended dust\" : null}\r\n        {result.key === \"NO2\" ? \"Nitrogen dioxide\" : null}\r\n        {result.key === \"CO\" ? \"Carbon monoxide\" : null}\r\n        {result.key === \"C6H6\" ? \"Benzene\" : null}\r\n        {result.key === \"O3\" ? \"Ozone\" : null}\r\n        {result.key === \"SO2\" ? \"Sulphur dioxide\" : null}\r\n      </span>\r\n\r\n      <span className=\"station-result__name\">{result.key}</span>\r\n      <AirLook item={result} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StationResults;\r\n","import React, { useEffect } from \"react\";\r\nimport { useFetchAir } from \"../hooks/useFetchAir\";\r\nimport StationResults from \"./StationResults\";\r\n\r\nimport \"./AirInfo.scss\";\r\n\r\nconst AirInfo = props => {\r\n  const {\r\n    getMeasuringStations,\r\n    measuringStations,\r\n    getMeasuringData,\r\n    measuringData\r\n  } = useFetchAir();\r\n  const { match } = props;\r\n  const urlStations = `http://api.gios.gov.pl/pjp-api/rest/station/sensors/${match.params.id}`;\r\n  useEffect(() => {\r\n    getMeasuringStations(urlStations);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  useEffect(() => {\r\n    if (measuringStations !== null) {\r\n      for (let item of measuringStations) {\r\n        getMeasuringData(\r\n          `http://api.gios.gov.pl/pjp-api/rest/data/getData/${item.id}`\r\n        );\r\n      }\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [measuringStations]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <button\r\n            onClick={() => props.history.goBack()}\r\n            className=\"button-info\"\r\n          >\r\n            Back\r\n          </button>\r\n          {measuringData !== null && (\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <div className=\"air-info\">\r\n                    <div className=\"air-info__content\">\r\n                      {measuringData.map(item => (\r\n                        <StationResults key={item.key} result={item} />\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AirInfo;\r\n","import React, { useEffect } from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { StationContex } from \"./StationContex\";\nimport { useFetchAir } from \"./hooks/useFetchAir\";\nimport Stations from \"./components/Stations\";\nimport AirInfo from \"./components/AirInfo\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.scss\";\n\nfunction App() {\n  const url = `http://api.gios.gov.pl/pjp-api/rest/station/findAll`;\n  const { getAllStation, allStation } = useFetchAir();\n  useEffect(() => {\n    getAllStation(url);\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\">Air quality app</h1>\n      <Router>\n        <Switch>\n          <StationContex.Provider value={allStation}>\n            <Route exact path={\"/\"} component={Stations} />\n            <Route exact path={`/info/:id`} component={AirInfo} />\n          </StationContex.Provider>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}